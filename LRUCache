class LRUCache {
    
    HashMap<Integer, Node> map;
    int capacity;
    Node head;
    Node tail;
    
    public LRUCache(int capacity) {
        
        map = new HashMap<>();
        this.capacity = capacity;
        head = new Node(0,0);
        tail = new Node(0,0);
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        
        if(map.containsKey(key)){
            Node x = map.get(key);
            remove(x);
            add(x);
            return x.value;
        }
        return -1;
    }
    
    public void put(int key, int value) {
        
        if(map.containsKey(key)){
            Node x = map.get(key);
            remove(x);
         
        }
        
        Node newNode = new Node(key, value);
        add(newNode);
        map.put(key, newNode);
        if(map.size() > capacity){
            Node x = head.next;
            remove(x);
            map.remove(x.key);
        }
        
    }
    
    public void remove(Node node){
        
        Node prev = node.prev;
        Node next = node.next;
        
        prev.next = next;
        next.prev = prev;
        
    }
    
    public void add(Node node){
        
        Node prev = tail.prev;
        prev.next = node;
        node.prev = prev;
        
        node.next = tail;
        tail.prev = node;
        
    }
    
    
    class Node{
        Node prev;
        Node next;
        int key, value;
        
        Node(int key, int value){
            this.key = key;
            this.value = value;
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
