/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }

Input: (7 -> 2 -> 4 -> 3) +
            (5 -> 6 -> 4)
       
Output: 7 -> 8 -> 0 -> 7
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        if(l1 != null && l2 == null){
            return l1;
        }
        if(l2 != null && l1 == null){
            return l2;
        }
        Stack<Integer> s1 = new Stack<>();
        Stack<Integer> s2 = new Stack<>();
        
        while(l1!= null){
            s1.push(l1.val);
            l1 = l1.next;
        }
        
        while(l2!= null){
            s2.push(l2.val);
            l2 = l2.next;
        }
        
         ListNode res = null;
    
        int carry = 0;
    
        while(!s1.isEmpty() || !s2.isEmpty()){
            
            int first = !s1.isEmpty()? s1.pop() : 0;
            int second = !s2.isEmpty() ? s2.pop() : 0;
            
            int sum = first + second + carry;
            carry = sum /10;
            
            ListNode new_node = new ListNode(sum%10);
            new_node.next = res;
            res = new_node;
            
        }
        
        if(carry != 0){
             
            ListNode new_node = new ListNode(carry);
            new_node.next = res;
            res = new_node;
        }
        return res;
    }
    
   
    
    
}
