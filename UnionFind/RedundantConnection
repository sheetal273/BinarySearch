class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        
        DSU dsu = new DSU(edges.length +1);
        for(int[] edge: edges){
            
            int first = edge[0];
            int second = edge[1];
            
            if(!dsu.union(first, second)){
                return edge;
            }
        }
        
        return new int[0];
    }
    
    
    
    class DSU{
        
        int[] parent;
        int[] rank;
        
        public DSU(int size){
            
            parent = new int[size];
            for(int i=0;i< size;i++){
                parent[i] = i;
            }
            rank = new int[size];
        }
        
        public int find(int i){
            if(parent[i] != i){
                parent[i] = find(parent[i]);
            }
            return parent[i];
        }
        
        public boolean union(int x, int y){
            int rootX = find(x);
            int rootY = find(y);
            
            if(rootX == rootY){
                return false;
            }
            
            if(rank[rootX] < rank[rootY]){
                parent[rootX] = rootY;
                rank[rootY]++;
            }
            else{
                parent[rootY] = rootX;
                rank[rootX]++;
            }
            return true;
        }
    }
}
