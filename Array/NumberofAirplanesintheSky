/**
 * Definition of Interval:
 * public classs Interval {
 *     int start, end;
 *     Interval(int start, int end) {
 *         this.start = start;
 *         this.end = end;
 *     }
 * }
 */

public class Solution {
    /**
     * @param airplanes: An interval array
     * @return: Count of airplanes are in the sky.
     */
     
     /*
     (1, 10),
     (2, 3),
     (5, 8),
     (4, 7)
     
     1 ------------------------------10
        2----3
                  5--------8
                4-------7
    
    3..7..8..10-----
    1 ---- 1
    2------2
    3------1
    4------2
    5------3
    7------2
    8------1
    10-----0
     */
    public int countOfAirplanes(List<Interval> airplanes) {
        // write your code here
        
        if(airplanes == null || airplanes.size() <=1){
            return 0;
        }
        Collections.sort(airplanes, (i1,i2) -> i1.start-i2.start);
        
        List<Integer> list = new ArrayList<>();
        for(int i=0;i< airplanes.size();i++){
            list.add(airplanes.get(i).end);
        }
        Collections.sort(list);
        System.out.println(" first end  : "+ list.get(0));
        int max =0;
        int k =0;
        int l =0;
        int planes = 0;
        while(l < airplanes.size() && k < list.size()){
            
            if(airplanes.get(l).start <= list.get(k)){
                
                if(airplanes.get(l).start == list.get(k)){
                    planes--;
                    k++;
                }
                planes++;
               // System.out.println("plnes  = "+ planes +" max = "+ max + " end = "+ interval.start + " and " + list.get(k));
                max = Math.max(planes, max);
                l++;
            }else{
                
                planes--;
                k++;
                
            }
        }
        return max;
    }
}





















