/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        if(node == null){
            return null;
        }
        HashMap<Node, Node> map = new HashMap<Node, Node>();
        Node n = new Node(node.val);
        map.put(node, n);
        
        dfs(node, map);
        
        return map.get(node);
    }
    
    static void dfs(Node node, HashMap<Node, Node> map){
        
       
        for(Node neigh : node.neighbors){
            
            if(!map.containsKey(neigh)){
                map.put(neigh, new Node(neigh.val));
                dfs(neigh, map);
            }
            
            map.get(node).neighbors.add(map.get(neigh));
            
        }
    }
}
