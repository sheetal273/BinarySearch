public class Solution {
    /**
     * @param grid: the 2D grid
     * @return: the shortest distance
     */
     
    public int shortestDistance(int[][] grid) {
        // write your code here
        
        if(grid == null || grid.length == 0){
            return 0;
        }
        
        int buildings = 0;
 
        
        int mindist = Integer.MAX_VALUE;
        int[][] dist = new int[grid.length][grid[0].length];
        int[][] btrack = new int[grid.length][grid[0].length];
        
        for(int i=0;i< grid.length;i++){
            
            for(int j=0;j< grid[0].length;j++){
                
                if(grid[i][j] == 1){
                    buildings++;
                    bfs(grid, dist, btrack, i, j);
                }
            }
        }
        for(int i=0;i< grid.length;i++){
            
            for(int j=0;j< grid[0].length;j++){
         
                if(btrack[i][j] == buildings && grid[i][j] == 0 && dist[i][j] != 0){
                    mindist =  Math.min(mindist, dist[i][j]);
                }
            }
        }
        
        return mindist;
    }
    
    void bfs(int[][] grid, int[][] dist, int[][] btrack, int row, int col){
        
            int[][] visited = new int[grid.length][grid[0].length];
            
            Queue<Track> queue = new LinkedList<Track>();
            queue.add(new Track(row, col, 0));
            
            int[][] DIR = {{-1,0},{1,0},{0,1},{0,-1}};
            
            while(!queue.isEmpty()){
                
                Track track = queue.poll();
                
                for(int[] dir: DIR){
                    
                    int nextRow = track.row + dir[0];
                    int nextCol = track.col + dir[1];
                    
                    if(nextRow >=0 && nextRow < grid.length && nextCol >=0 && nextCol < grid[0].length && grid[nextRow][nextCol] == 0 && visited[nextRow][nextCol] != 1){
                        visited[nextRow][nextCol] = 1;
                        queue.add(new Track(nextRow, nextCol, track.dist+1));
                        dist[nextRow][nextCol] += track.dist+1;
                        btrack[nextRow][nextCol] += 1;
                    }
                }
            }
    }
    
    public class Track{
        int row;
        int col;
        int dist;
        
        Track(int row, int col, int dist){
            
            this.row = row;
            this.col = col;
            this.dist = dist;
        }
    };

}
