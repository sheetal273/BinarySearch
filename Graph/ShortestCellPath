import java.io.*;
import java.util.*;

class Solution {
  
 

   static class Node {
    int row;
    int col;
    int dist;
    
    Node(int row, int col, int dist){
      this.row = row;
      this.col = col;
      this.dist = dist;
    }
  }
  
  static boolean isValid(int[][] grid, boolean visited[][], int row, int col){
    
    if(row < 0 || row >= grid.length || col < 0 || col >= grid[0].length || visited[row][col] || grid[row][col] == 0){
      return false;
    }
    return true;
  }
  
	static int shortestCellPath(int[][] grid, int sr, int sc, int tr, int tc) {
		// your code goes here
    
    if(grid == null){
      return 0;
    }
    
     /*

  
  [1,1,1,1],
  [0,0,0,1],
  [1,1,1,1]
  
  Queue = > (0,0,0) => (0,1,1)
    
  
  */
    
    boolean[][] visited = new boolean[grid.length][grid[0].length];
    
    Queue<Node> queue = new LinkedList<Node>();
    queue.add(new Node(sr,sc,0));
    visited[sr][sc] = true;
    
    int min_path = Integer.MAX_VALUE;
      int rowNum[] = {-1,0,0, 1 };
      int colNum[] = {0, 1, -1,0};
      
    while(!queue.isEmpty()){
      
      
      Node n = queue.poll();
      
      if(n.row == tr && n.col == tc){
        
         return n.dist;
      }
    
     
      for(int i=0;i< 4;i++){
       
        if(isValid(grid, visited,n.row + rowNum[i], n.col +colNum[i])){
          visited[n.row + rowNum[i]][n.col +colNum[i]] = true;
         queue.add(new Node(n.row + rowNum[i], n.col +colNum[i], n.dist+1));
      }
        
      }
      
     

    }
    
   return -1;
    
	}
  


	public static void main(String[] args) {
	
	}
}
