/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
     
        if(root == null){
            return "";
        }
        StringBuilder sb = new StringBuilder();
        helper(root, sb);
        return sb.toString();
    }

    static void helper(TreeNode root, StringBuilder sb){
        
        if(root == null){
            sb.append("#,");
            return;
        }
        sb.append(root.val);
        sb.append(",");
        helper(root.left, sb);
        helper(root.right, sb);
    }
    
    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data == null || data.length() < 1){
            return null;
        }
        LinkedList<String> list = new LinkedList<>(Arrays.asList(data.split(",")));
        return constructTree(list);
    }
    
    static TreeNode constructTree(LinkedList<String> list){
        
        String str = list.removeFirst();
        if(str.equals("#")){
            return null;
        }
        
            TreeNode root = new TreeNode(Integer.parseInt(str));
            root.left = constructTree(list);
            root.right = constructTree(list);
        
        return root;
    }
}





// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
