/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 
 1 2 3 4 5 6
 
2 3 -4 - 5 -6

Point right child to the left child of left child 
 
 */
class Solution {
    
     public void flatten(TreeNode root) {
    
        if(root == null){ 
            return;
        } 
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
         
        while(!stack.isEmpty()){
            
            TreeNode node = stack.pop();
            if(node.right != null){
                stack.push(node.right);
            }
            
            if(node.left != null){
                stack.push(node.left);
            }
            if(!stack.isEmpty()){
                 node.right = stack.peek();
            }
             
            node.left = null;
            
        }
         
     }
    
    public void flattenRecurrsive(TreeNode root) {
    
        if(root == null){ 
            return;
        } 
        
        if(root.left == null && root.right == null){
             return;
        }
    
        if(root.left!=null){
            
            flatten(root.left);
            
            TreeNode temp = root.right;
            root.right = root.left;
            root.left = null;
            
            TreeNode curr = root.right;
            while(curr.right!=null){
                curr = curr.right;
            }
            
            curr.right = temp;
        }
        flatten(root.right);
        
    }
    
}
