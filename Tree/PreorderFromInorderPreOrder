/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 
preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]

=>      (9)3(15,20,7)
    9           20(15,7)
            15          7
            
    
1. Set Preorder[0] as root.
2. Lookup for 0..rootindex..right in the inorder array
3. do the same excercise for left and right. Follow the step1.
 
 */
class Solution {
    
    public static HashMap<Integer, Integer> map = new HashMap<>();
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        
        for(int i=0;i< inorder.length;i++){
            map.put(inorder[i], i);
        }
        TreeNode root = null;
        return buildTree(root, preorder, inorder, 0, preorder.length, 0, inorder.length);
    }
    
     public static TreeNode buildTree(TreeNode root, int[] preorder, int[] inorder, int pstart, int pend, int istart, int iend) {
         if(pstart > preorder.length -1 || istart > iend){
             return null;
         }
       
    //     if(root == null && preorder.length > 0){
          root = new TreeNode(preorder[pstart]);
      //  }
         
         root.left = buildTree(root, preorder, inorder, pstart+1, pend, istart, map.get(root.val)-1);
         root.right = buildTree(root, preorder, inorder,pstart+map.get(root.val)-istart+1, pend, map.get(root.val)+1, iend);
        
         return root;
    }
    
}























