class Solution {
    public int minDistance(String word1, String word2) {
        return diffBetweenTwoStrings(word1, word2, 0, 0);
    }
    
       static int diffBetweenTwoStringsOptimized(String source, String target) {
		// your code goes here
    
    int m = source.length();
    int n = target.length();
         
    int[][] memo = new int[m+1][n+1];         

    for(int i=0;i<= m;i++){
        for(int j =0;j<= n;j++){
            
            if(i == 0){
                memo[i][j] = j;
            }
            else if(j == 0){
                memo[i][j] = i;
            }
            
            else if(source.charAt(i-1) != target.charAt(j-1)){
                memo[i][j] = 1 + Math.min(Math.min(memo[i-1][j], memo[i][j-1]), memo[i-1][j-1]);
            }else{
                memo[i][j] = memo[i-1][j-1];
            }
            
        }
    }

    return memo[m][n];
	}
	
    static int diffBetweenTwoStrings(String source, String target, int m, int n) {
		// your code goes here
    
   
    if(source.length() == m){
        return target.length()-n;
    }
       
    if(target.length() == n){
        return source.length()-m;
    }
       
        
    if(source.charAt(m) == target.charAt(n)) 
    {
        return diffBetweenTwoStrings(source, target, m+1, n+1);
    }
    
    if(source.charAt(m)!= target.charAt(n))
    {        
        return 1+ Math.min(
            Math.min(diffBetweenTwoStrings(source, target, m+1, n),diffBetweenTwoStrings(source, target, m, n+1)),
        diffBetweenTwoStrings(source, target, m+1, n+1));
    }
    return 0;
	}
}
