class Solution {

    static int count =0;
    
    public int climbStairs(int n) { 
    
     //   return climbStairsdp(n);
     //   return climbStairsdpWithoutExtraSpace(n);
     //   return helper(n, 0);
        
          int[] memo = new int[n+1];
          return helperWithMemo(n, 0, memo);
    
    }
    
     public int climbStairsdpWithoutExtraSpace(int n) {
        
        
        if(n == 0 || n == 1){
            return n;
        }
        
        int first = 1;
        int second = 2;
        
        for(int i=3;i<=n ;i++){
            
            int third = first+ second;
            first = second;
            second = third;
           
        }
                
       return second; 
    }
    
    
    public int climbStairsdp(int n) {
        
        
        if(n == 0 || n == 1){
            return n;
        }
        
        int[] dp = new int[n+1];
        dp[0] = 0;
        dp[1] = 1;
        dp[2] = 2;
        
        for(int i=3;i<=n ;i++){
            
            dp[i] = dp[i-1] + dp[i-2];
        }
                
       return dp[n]; 
    }
    
     public int helper(int n, int i) {
        
         if(i > n){
             return 0;
         }
         if(n == i){
             return 1;
         }
        
        return helper(n, i+1) + helper(n, i+2);
     }
    
     public int helperWithMemo(int n, int i, int[] memo) {
        
         
         if(i > n){
             return 0;
         }
       
         if(n == i){
             return 1;
         }
         if(memo[i] > 0){
             return memo[i];
         }
         
        memo[i] = helperWithMemo(n, i+1, memo) + helperWithMemo(n, i+2, memo);
        return memo[i];
     }
}
