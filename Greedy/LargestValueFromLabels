class Solution {
    
    /*
    [5,4,3,2,1], labels = [1,3,3,3,2], num_wanted = 3, use_limit = 2
    
    5 + 4+ 3
    
    1 - 2
    3 - 2
    2 - 2
    
    [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 1
  
    9+7 = 16
     
    [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 2
  
    9+8+7
    
    */
    public int largestValsFromLabels(int[] values, int[] labels, int num_wanted, int use_limit) {
     
        PriorityQueue<Item> queue = new PriorityQueue<>((i1,i2) -> i2.value - i1.value);
        for(int i=0;i< values.length;i++){
          
            queue.add(new Item(values[i], labels[i]));
        }
        
        
        int value = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int label: labels){
            map.put(label, use_limit);
        }
        
        while(!queue.isEmpty()){
            
            Item item = queue.poll();
            
            int curr_limit = map.get(item.label);
            if(curr_limit > 0 && num_wanted > 0){
                map.put(item.label, curr_limit-1);
                num_wanted--;
                value = value + item.value;
            }
        
        }
    return value;
    }
    
    class Item {
        int value;
        int label;
    
    Item(int value, int label){
        this.value = value;
        this.label = label;
    }
   
    }
}
