class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        
        if(intervals.length < 1){
            return 0;
        }
        ArrayList<Interval> intervalList = new ArrayList<Interval>();
		
		for(int i =0;i< intervals.length;i++) {
			
			int start = intervals[i][0];
			int finish = intervals[i][1];
			Interval interval = new Interval(start, finish);
			intervalList.add(interval);
			
		}
        
        
        return eraseOverlapIntervals1(intervalList);
    }
    
    public static int eraseOverlapIntervals1(ArrayList<Interval> intervalList) {
      int count = 0;
		
        
        
		Collections.sort(intervalList);
		
		for(Interval interval : intervalList) {
			
			System.out.println("start = " + interval.start + " finish : "+ interval.finish);
		}
		
        
		int prev = intervalList.get(0).finish;
		for(int i=1;i< intervalList.size();i++) {
			
			if(prev > intervalList.get(i).start) {
				count++;
			}
			else {
				prev = intervalList.get(i).finish;
			}
			
		}
		
		return count;
			}
		
    
    
    class Interval implements Comparable<Interval>
{
	
	int start;
	int finish;
	
	Interval(int start, int finish){
		
		this.start = start;
		this.finish = finish;
	}
	
	public int compareTo(Interval compareFruit) {
	    
        int compareQuantity = ((Interval) compareFruit).finish; 
        
        //ascending order
        return this.finish - compareQuantity;
        
    }	
}

}
